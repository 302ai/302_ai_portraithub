"use client";

import React, { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import ImageDrop from "../change-style/text/image-drop";
import { useAtom } from "jotai";
import { actionReferenceImagesStoreAtom } from "@/stores/slices/action_reference_images_store";
import { Button } from "@/components/ui/button";
import { appConfigAtom } from "@/stores/slices/config_store";
import { store } from "@/stores";
import { useTranslations } from "next-intl";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { imageEditModels, models } from "@/constants/models";
import { useSearchParams } from "next/navigation";
import { generationStoreAtom } from "@/stores/slices/generation_store";
import { toast } from "sonner";
import { useHistory } from "@/hooks/db/use-gen-history";
import ky from "ky";
import { env } from "@/env";
import { editImageStoreAtom } from "@/stores/slices/edit_image_store ";
import { useFromMulerun } from "@/hooks/useMulerun";

const StyleModification = () => {
  const t = useTranslations();
  const searchParams = useSearchParams();
  const [previewUrl, setPreviewUrl] = useState<string>("");
  const [selectedModel, setSelectedModel] = useState(
    "gemini-2.5-flash-image-preview"
  );
  const [prompt, setPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [editImageForm, setEditImageForm] = useAtom(editImageStoreAtom);

  const [generationCount, setGenerationCount] = useAtom(generationStoreAtom);
  const { addHistory, updateHistory } = useHistory();
  const { isMulerun, sessionId, agentId } = useFromMulerun();

  const setEditImage = (image: string) => {
    setEditImageForm({
      imageToEdit: image,
    });
  };

  // 检测URL参数中的图片 - 只在组件初始化时执行一次
  useEffect(() => {
    const imageParam = searchParams.get("image");
    const promptParam = searchParams.get("prompt");
    const modelParam = searchParams.get("model");

    if (imageParam) {
      setPreviewUrl(imageParam);
      setEditImage(imageParam);
    }
    if (imageParam && promptParam) {
      setPrompt(promptParam);
    }
    if (modelParam) {
      setSelectedModel(modelParam);
    }
  }, [searchParams, setEditImageForm]);

  // 自动生成逻辑 - 单独的 useEffect，避免影响模型选择
  useEffect(() => {
    const imageParam = searchParams.get("image");
    const promptParam = searchParams.get("prompt");
    const modelParam = searchParams.get("model");

    // 检查是否已经自动生成过
    const autoGenKey = `auto_generated_${imageParam || ""}_${promptParam || ""}_${modelParam || ""}`;
    const hasAutoGenerated = sessionStorage.getItem(autoGenKey) === "true";

    if (imageParam && promptParam && modelParam && !hasAutoGenerated) {
      // autoGen
      const autoGenerateImage = async () => {
        if (generationCount.generationCount >= 4) {
          toast.warning(t("global.error.max_generation"));
          return;
        }

        setIsGenerating(true);
        setGenerationCount((prev) => ({
          ...prev,
          loading: true,
          generationCount: prev.generationCount + 1,
        }));

        let historyId = "";

        try {
          historyId = await addHistory({
            rawPrompt: promptParam,
            shouldOptimize: false,
            image: {
              base64: "",
              prompt: "",
              model: modelParam,
              status: "pending",
              type: "realistic_photo",
            },
          });

          // 调用图片修改API
          const result = await ky
            .post("/api/gen-img-with-img", {
              json: {
                img: imageParam,
                prompt: promptParam,
                model: modelParam,
                apiKey: store.get(appConfigAtom).apiKey || "",
                size: "1024x1024",
                sourceLang: "ZH",
                mulerunSessionId: isMulerun ? sessionId : undefined,
                isMulerun: isMulerun,
                agentId: isMulerun ? agentId : undefined,
              },
              timeout: 300000,
            })
            .json<{
              image: {
                b64_json?: string;
                url?: string;
                image?: string;
                imageUrl?: string;
                prompt?: string;
              };
            }>();

          // 更新历史记录
          const imageData = result.image.b64_json || result.image.image || "";
          const imagePrompt = result.image.prompt || promptParam;

          updateHistory(historyId, {
            rawPrompt: promptParam,
            shouldOptimize: false,
            image: {
              base64: imageData.startsWith("data:")
                ? imageData
                : "data:image/png;base64," + imageData,
              prompt: imagePrompt,
              model: modelParam,
              status: "success",
              type: "realistic_photo",
            },
          });

          toast.success(t("global.generate_success"));
        } catch (error) {
          console.error("Error generating image:", error);

          // 尝试解析错误信息
          let errorMessage = t("global.generate_error");
          if (error instanceof Error) {
            errorMessage = error.message;
          }

          toast.error(errorMessage);

          updateHistory(historyId, {
            rawPrompt: promptParam,
            shouldOptimize: false,
            image: {
              base64: "",
              prompt: "",
              model: modelParam,
              status: "failed",
              type: "realistic_photo",
            },
          });
        } finally {
          setIsGenerating(false);
          setGenerationCount((prev) => ({
            ...prev,
            loading: false,
            generationCount: Math.max(prev.generationCount - 1, 0),
          }));
        }
      };

      autoGenerateImage();
      // 标记已经自动生成过
      sessionStorage.setItem(autoGenKey, "true");
    }
  }, [
    searchParams,
    generationCount.generationCount,
    t,
    addHistory,
    updateHistory,
    setGenerationCount,
  ]);

  const handleGenerateImage = async () => {
    if (generationCount.generationCount >= 4) {
      toast.warning(t("global.error.max_generation"));
      return;
    }

    if (!editImageForm.imageToEdit) {
      toast.error(t("basic.warning.actionImage"));
      return;
    }

    setIsGenerating(true);
    setGenerationCount((prev) => ({
      ...prev,
      loading: true,
      generationCount: prev.generationCount + 1,
    }));

    let historyId = "";

    try {
      historyId = await addHistory({
        rawPrompt: prompt || t("basic.input.style_edit_example"),
        shouldOptimize: false,
        image: {
          base64: "",
          prompt: "",
          model: selectedModel,
          status: "pending",
          type: "realistic_photo",
        },
      });

      // 调用图片修改API
      const result = await ky
        .post("/api/gen-img-with-img", {
          json: {
            img: editImageForm.imageToEdit,
            prompt: prompt || t("basic.input.style_edit_example"),
            model: selectedModel,
            apiKey: store.get(appConfigAtom).apiKey || "",
            size: "1024x1024",
            sourceLang: "ZH",
            mulerunSessionId: isMulerun ? sessionId : undefined,
            isMulerun: isMulerun,
            agentId: isMulerun ? agentId : undefined,
          },
          timeout: 300000,
        })
        .json<{
          image: {
            b64_json?: string;
            url?: string;
            image?: string;
            imageUrl?: string;
            prompt?: string;
          };
        }>();

      // 更新历史记录
      const imageData = result.image.b64_json || result.image.image || "";
      const imagePrompt = result.image.prompt || prompt;

      updateHistory(historyId, {
        rawPrompt: prompt,
        shouldOptimize: false,
        image: {
          base64: imageData.startsWith("data:")
            ? imageData
            : "data:image/png;base64," + imageData,
          prompt: imagePrompt,
          model: selectedModel,
          status: "success",
          type: "realistic_photo",
        },
      });

      toast.success(t("global.generate_success"));
    } catch (error) {
      console.error("Error generating image:", error);

      // 尝试解析错误信息
      let errorMessage = t("global.generate_error");
      if (error instanceof Error) {
        errorMessage = error.message;
      }

      toast.error(errorMessage);

      updateHistory(historyId, {
        rawPrompt: prompt,
        shouldOptimize: false,
        image: {
          base64: "",
          prompt: "",
          model: selectedModel,
          status: "failed",
          type: "realistic_photo",
        },
      });
    } finally {
      setIsGenerating(false);
      setGenerationCount((prev) => ({
        ...prev,
        loading: false,
        generationCount: Math.max(prev.generationCount - 1, 0),
      }));
    }
  };

  return (
    <div className="flex flex-col gap-4 md:flex-row">
      {/* 左侧图片上传 */}
      <Card className="flex h-64 flex-1 flex-col items-center justify-center">
        <ImageDrop
          previewUrl={previewUrl}
          setPreviewUrl={setPreviewUrl}
          imageForm={editImageForm.imageToEdit}
          setImageForm={setEditImage}
          height="280px"
        />
      </Card>

      {/* 右侧控制区域 */}
      <div className="flex w-full flex-col gap-4 md:w-96">
        {/* 模型选择 */}
        <div className="space-y-2">
          <Label>{t("basic.model")}</Label>
          <Select
            value={selectedModel}
            onValueChange={(value) => setSelectedModel(value)}
          >
            <SelectTrigger>
              <SelectValue placeholder={t("basic.select_model")} />
            </SelectTrigger>
            <SelectContent>
              {[...models, ...imageEditModels].map((model) => (
                <SelectItem key={model} value={model}>
                  {model}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* 风格描述输入 */}
        <div className="space-y-2">
          <Label>{t("basic.style_description")}</Label>
          <Textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder={t("basic.input.style_edit_description")}
            className="min-h-[100px]"
          />
        </div>

        {/* 生成按钮 */}
        <Button onClick={handleGenerateImage} className="w-full">
          {t("global.generate_image")}
        </Button>
      </div>
    </div>
  );
};

export default StyleModification;
